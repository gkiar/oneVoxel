%load_ext autoreload
%autoreload 2
from oneVoxel import one_voxel_noise
import numpy as np
image = np.random.random((20, 20, 10))
mask = (np.random.random((20, 20)) > 0.4).astype(int)
image.shape
mask.shape
output = one_voxel_noise(image, mask)
output = one_voxel_noise(image, mask)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output
output
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output = one_voxel_noise(image, mask, erode=0)
output
output, loc = one_voxel_noise(image, mask, erode=0)
loc
output, loc = one_voxel_noise(image, mask, erode=0)
loc
output - image
np.where(output - image)
np.where((output - image))
image
loc
image[loc]
output[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=False, intensity=50)
output[loc]
image[loc]
output[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=False, intensity=50)
output[loc]
image[loc]
image
image
image[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=1.04)
image[loc]
output[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=1.04)
image[loc]
output[loc]
loc
image[loc]
output[loc] / image[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04)
image[loc]
output[loc]
output[loc] / image[loc]
np.where(image-output)
loc
image = np.random.random((20, 20, 10, 5, 2))
image.shape
mask.shape
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='single')
loc, np.where(image-output)
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='uniform')
loc, np.where(image-output)
loc, list(zip(*np.where(image-output)))
list(zip(*np.where(image-output))), loc
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='uniform')
list(zip(*np.where(image-output))), loc
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='single')
list(zip(*np.where(image-output))), loc
list(zip(*np.where(image-output))), loc, output[loc]/image[loc]
list(zip(*np.where(image-output))), loc, output[loc], image[loc], output[loc]/image[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='uniform')
list(zip(*np.where(image-output))), loc, output[loc], image[loc], output[loc]/image[loc]
image = np.random.random((20, 20, 10, 3))
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='uniform')
list(zip(*np.where(image-output))), loc, output[loc], image[loc], output[loc]/image[loc]
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='single')
list(zip(*np.where(image-output))), loc, output[loc], image[loc], output[loc]/image[loc]
list(zip(*np.where(image-output))), loc
image.shape
mask.shape
mask.shape in image.shape
mask.shape == image.shape[0:len(mask.shape)]
mask.shape is image.shape[0:len(mask.shape)]
mask.shape != image.shape[0:len(mask.shape)]
mask.shape == image.shape[0:len(mask.shape)]
list(zip(*np.where(image-output))), loc
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='single')
list(zip(*np.where(image-output))), loc
image.shape
mask.shape
image.shape - mask.shape
image.shape[2:]
image.shape
mask.shape
image.shape[2:]
from combinations import iteritems
from combination import iteritems
from iteritems import combinations
from iter_items import combinations
from itertools import combinations
combinations((10, 3))
combinations(10, 3)
from itertools import permutations
permutations(zip(np.arange(10), np.arange(3)
)
)
list(permutations(zip(np.arange(10), np.arange(3))))
np.arange(10)
zip(np.arange(10), np.arange(3))
list(zip(np.arange(10), np.arange(3)))
from itertools import product
image.shape[2:]
product(*image.shape[2:])
product(image.shape[2:])
list(product(image.shape[2:]))
list(product(np.arange(10), np.arange(3)))
list(product(np.arange(5), np.arange(3), np.arange(2)))
*[1 for a in [1,2,3]]
product(*[1 for a in [1,2,3]])
product(*[a for a in [1,2,3]])
product(*[a for a in [[1],[2],[3]]])
list(product(*[a for a in [[1],[2],[3]]]))
np.arange(10)
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='independent')
list(zip(*np.where(image-output))), loc
output, loc = one_voxel_noise(image, mask, erode=0, scale=True, intensity=0.04, mode='independent')
list(zip(*np.where(image-output))), loc
list(zip(*np.where(image-output))), sorted(loc)
list(zip(*np.where(image-output))) == sorted(loc)
len(loc)
history
